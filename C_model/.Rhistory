select(-method, -type, -model) %>%
mutate(predicted_age_mat_yrs = round(age_mat, digits=4),
predicted_lower_bound_yrs = round(lower, digits=4),
predicted_upper_bound_yrs = round(upper, digits=4)) %>%
rename(scientific_name = organism_name,
model = model_labs) %>%
select(scientific_name, common_name,
predicted_age_mat_yrs, predicted_lower_bound_yrs, predicted_upper_bound_yrs,
assembly_accession, model,
redlist_cat, class, order, family, genus) %>%
arrange(#desc(redlist_cat),
scientific_name)
write.csv(supp_unknowns_preds, "figuresTables/Table S[unknowns_preds].csv", row.names=FALSE)
## SET UP ----
## define models
models<-c("AllHomoFc")
## for testing
# mod<-c("AllHomoFc")
## set working to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
start_time<-Sys.time()
print(paste("Script start time: ", start_time))
## load libraries
library(caret)
library(glmnetUtils)
library(glmnet)
library(cocor)
library(plotmo)
library(tidyverse)
## FUNCTIONS ----
scaleEvalMat<-function(eval_matrix, train_matrix, na.rm=TRUE) {
## check if both inputs are matrices
if (!is.matrix(eval_matrix) || !is.matrix(train_matrix)) {
stop("Both inputs must be matrices")
}
## check if column names match
if (!all(colnames(eval_matrix) %in% colnames(train_matrix))) {
stop("Column names of test matrix not found in trainval matrix")
}
if (!all(colnames(train_matrix) %in% colnames(eval_matrix))) {
stop("Column names of trainval matrix not found in test matrix")
}
## diagnostic message
message("Column names match successfully. Aligning columns for scaling.")
## reorder columns of train_matrix to match those of eval_matrix
train_matrix<-train_matrix[, colnames(eval_matrix)]
## pre-compute mean and standard deviation values for each column in train_matrix
means<-apply(train_matrix, 2, mean, na.rm=na.rm)
sds<-apply(train_matrix, 2, sd, na.rm=na.rm)
## initialize a matrix to store the scaled data
scaled_matrix<-matrix(nrow=nrow(eval_matrix), ncol=ncol(eval_matrix))
## apply column-wise mean-sd scaling using train_matrix mean and sd
for (col_idx in 1:ncol(eval_matrix)) {
mean_val<-means[col_idx]
sd_val<-sds[col_idx]
col<-eval_matrix[, col_idx]
## handle the case where sd is zero (to avoid division by zero)
if (sd_val == 0) {
scaled_matrix[, col_idx]<-ifelse(mean_val == 0, rep(0, length(col)), rep(1, length(col)))
} else {
scaled_matrix[, col_idx]<-(col - mean_val) / sd_val
}
## assign row and column names
rownames(scaled_matrix)<-rownames(eval_matrix)
colnames(scaled_matrix)<-colnames(eval_matrix)
return(scaled_matrix)
}
## FOR ALL 4 MODELS ... ----
## loop through analysis
for (mod in models) {
print("################################################################")
print(paste0("########################### ", mod, " ###############################"))
print("################################################################")
## print time
Sys.time()
## lowercase
mod_tl<-tolower(mod)
## define response
response<-"mean_age_mat"
## print it
paste0("metric type specified: ", response)
## import model list
bagged_mod_list<-readRDS(paste0("dataFiles/07.00_modellist_",
gsub("fc", "", mod_tl),
".rds"))
## import pheno data (no age mat)
pheno_genomic<-read.csv(paste0("../A_getGenomicData/dataFilesFc/07.00_pheno_genomic_",
mod_tl,
".csv"))
pheno_fc<-read.csv(paste0("../B_exploreData/dataFiles/00.03_pheno_fc.csv")) %>%
left_join(pheno_genomic, .)
## import CpG oe data
cpg_oe_data_fc<-read.csv(paste0("../A_getGenomicData/dataFilesFc/07.00_cpg_oe_data_full_",
mod_tl, ".csv"))
## PREDICT FC ----
## format fc data ----
## convert categorical feature to binary ('one hot encoding') for fc data
one_hot_clade_data_fc<-model.matrix(~order-1, data=pheno_fc %>%
column_to_rownames(., var="assembly_id"))
## create feature matrix
featmat_fc<-cpg_oe_data_fc %>%
## filter for fc spp
rename(assembly_id=X) %>%
filter(assembly_id %in% pheno_fc$assembly_id) %>%
## add gc stuff
left_join(pheno_fc %>%
mutate(prop_gc=gc_percent/100) %>%
select(assembly_id,
prop_gc)) %>%
column_to_rownames(., var="assembly_id") %>%
## impute zeros
replace(is.na(.), 0)
## get all features from all models
unique_features<-c()
for (i in 1:length(bagged_mod_list)) {
model<-bagged_mod_list[[i]]
## extract coefficients (excluding the intercept) for non-zero features
features<-rownames(coef(model))[-1]
## add unique features to the vector
unique_features<-union(unique_features, features)
}
## add clade data and subset for model feats
featmat_fc<-cbind(featmat_fc, one_hot_clade_data_fc) %>%
## subset for features with coef > 0
select(., any_of(unique_features)) %>%
## format as matrix
as.matrix(.)
# add missing one-hot encoded data so you can model it
missing_features<-setdiff(unique_features, colnames(featmat_fc))
zero_data<-matrix(0, nrow=nrow(featmat_fc), ncol=length(missing_features))
colnames(zero_data)<-missing_features
featmat_fc<-cbind(featmat_fc, zero_data)
## check they match
if (ncol(featmat_fc) != length(unique_features)) {
stop("Error: The number of columns in featmat_fc is not equal to the length of features.")
}
## scale data ----
## import trainval matrix
featmat_trainval<-read.csv(paste0("dataFiles/07.00_featmat_trainval_",
gsub("fc", "", mod_tl),
".csv")) %>%
column_to_rownames(var="X") %>% as.matrix(.)
## scale features
featmat_fc_scaled<-scaleEvalMat(featmat_fc, featmat_trainval)
## predict for fcs ----
## make predictions using the ensemble
glmnet_phenoresults_fcpreds<-NULL
for (i in 1:length(bagged_mod_list)) {
glmnet_model<-bagged_mod_list[[i]]
if (is.null(glmnet_model)) {
print(paste0("No model no. ", i, " for ", mod_tl))
} else {
print(paste0("Predicting FC set for ", mod_tl, " model no. ", i))
## retrieve lambda
lambda_1se<-attr(glmnet_model, "lambda.1se")
## use the model and the minimum lambda value to predict log(pheno) for the training data
pheno_fc$scaled_log_predicted_age_mat<-predict(glmnet_model,
featmat_fc_scaled,
type="response",
s=lambda_1se)[,'s1']
## unscale the value
pheno_fc$log_predicted_age_mat<-(pheno_fc$scaled_log_predicted_age_mat*attr(glmnet_model,"sd.logy.trainval"))+attr(glmnet_model,"mean.logy.trainval")
## detransform the predicted value
pheno_fc$detrans_predicted_age_mat<-exp(pheno_fc$log_predicted_age_mat)
## add model number
pheno_fc$model_number<-i
## create pheno results
glmnet_phenoresults_fcpreds<-rbind(glmnet_phenoresults_fcpreds, pheno_fc)
}
## format results ----
glmnet_phenoresults_fcpreds<-glmnet_phenoresults_fcpreds %>%
mutate(model_number_labs=paste0("Model 0", model_number)) %>%
mutate(model_number_labs=gsub("010", "10", model_number_labs)) %>%
mutate(model=mod_tl) %>%
mutate(model_labs=ifelse(model=="allhomofc", "All-vertebrate",
ifelse(model=="mammalshomofc", "Mammal-specific",
ifelse(model=="reptilesgallusfc", "Reptile-specific",
ifelse(model=="fishdaniofc", "Fish-specific",
"error")))))
## export fc data
write.csv(glmnet_phenoresults_fcpreds,
paste0("dataFiles/14.00_glmnet_phenoresults_fcpreds_",
mod_tl, ".csv"), row.names=FALSE)
## bag predictions (fc data) ----
## bag the model estimates
bagged_phenoresults_fc<-glmnet_phenoresults_fcpreds %>%
group_by(assembly_id) %>%
mutate(bagged_detrans_predicted_age_mat=median(detrans_predicted_age_mat),
bagged_log_predicted_age_mat=median(log_predicted_age_mat)) %>%
## remove anything model-specific
select(-log_predicted_age_mat, -scaled_log_predicted_age_mat,
-detrans_predicted_age_mat,
-model_number, -model_number_labs) %>%
unique(.) %>%
as.data.frame(.)
write.csv(bagged_phenoresults_fc,
paste0("dataFiles/14.00_bagged_phenoresults_", mod_tl, ".csv"),
row.names=FALSE)
}
## print session info
sessionInfo()
## print end time
end_time<-Sys.time()
print(paste("Script end time: ", end_time))
print(paste("Elapsed time: ",  end_time - start_time))
## END SCRIPT
##
current_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
knitr::opts_knit$set(root.dir=normalizePath(paste0(current_directory)))
## load libraries
library(viridis)
library(ggpubr)
library(ggrepel)
library(plotmo)
library(tidyverse)
## read in data
bagged_pheno_allhomo <- read.csv("dataFiles/09.00_bagged_phenoresults_allhomo.csv")
## lifespan correlation plot (for main figure)
busco <- (ggscatter(data = bagged_pheno_allhomo,
x = "b_complete",
y = "bagged_detrans_relative_error",
add = "reg.line",
xlab = "Genome completeness\n(%)",
ylab = "Prediction error (%)",
shape=21,
alpha = 0.7,
size=1.75,
ggtheme = theme_classic(),
fill = "bagged_detrans_absolute_error",
legend = "right",
legend.title = "Prediction error (years)") +
stat_cor(aes(label = paste(..r.label.., ..rr.label..,
..p.label.., sep = "~`,`~")),
label.x.npc = 0.05,
label.y.npc = 0.05,
size=3.3)+
scale_fill_viridis_c(option = "D", trans="log10",
direction=1)+
scale_shape_manual(values=c(21, 23), guide = "none"))+
scale_y_log10()
# busco
## read in data
bagged_pheno_allhomo <- read.csv("dataFiles/09.00_bagged_phenoresults_allhomo.csv")
## lifespan correlation plot (for main figure)
busco2 <- (ggscatter(data = bagged_pheno_allhomo,
x = "b_complete",
y = "bagged_detrans_absolute_error",
add = "reg.line",
xlab = "Genome completeness\n(%)",
ylab = "Prediction error (years)",
shape=21,
alpha = 0.7,
size=1,
ggtheme = theme_classic(),
fill = "grey70",
color="grey70",
legend = "right",
legend.title = "Prediction error (years)") +
stat_cor(aes(label = paste(..r.label.., ..rr.label..,
..p.label.., sep = "~`,`~")),
label.x.npc = 0.05,
label.y.npc = 0.05,
fill="grey70",
size=2)+
scale_shape_manual(values=c(21, 23), guide = "none"))+
scale_y_log10()
busco2
busco3 <- ggplot(data = bagged_pheno_allhomo,
aes(x = b_complete,
y = bagged_detrans_absolute_error)) +
theme_classic()+
geom_point(fill="grey70",
stroke=0.25,
alpha=0.5,
shape=21,
size=0.9)+
labs(y="Prediction error (years)",
x="Genome completeness\n(%)")+
scale_y_log10(labels = ~ format(.x, scientific = FALSE))+
scale_x_log10(labels = ~ format(.x, scientific = FALSE))+
geom_smooth(color="grey70",
method=lm,
se=FALSE)+
stat_cor(aes(label = paste(after_stat(r.label),
after_stat(rr.label),
after_stat(p.label),
sep = "~`,`~")),
color="grey70",
label.x.npc = 0.001,
label.y.npc = 0.05,
size=2)
busco3
## create viridis colour scale
custom_viridis <- viridis_pal(option = "D", direction=-1)(4)[2:4]
## change the first colour
custom_viridis <- c("grey70", custom_viridis)
bagged_pheno_all <- rbind(rbind(rbind(
read.csv("dataFiles/09.00_bagged_phenoresults_allhomo.csv") %>% mutate(model = "All-vertebrate"),
read.csv("dataFiles/09.00_bagged_phenoresults_fishdanio.csv") %>% mutate(model = "Fish")),
read.csv("dataFiles/09.00_bagged_phenoresults_reptilesgallus.csv") %>% mutate(model = "Reptiles")),
read.csv("dataFiles/09.00_bagged_phenoresults_mammalshomo.csv") %>% mutate(model = "Mammals"))
busco4 <- ggplot(data = bagged_pheno_all,
aes(x = b_complete,
y = bagged_detrans_absolute_error)) +
theme_classic()+
geom_point(aes(fill=model),
# fill="grey70",
stroke=0.25,
alpha=0.5,
shape=21,
size=0.9)+
labs(y="Prediction error (years)",
x="Genome completeness\n(%)")+
scale_y_log10(labels = ~ format(.x, scientific = FALSE))+
scale_x_log10(labels = ~ format(.x, scientific = FALSE))+
scale_color_manual(values=custom_viridis, guide="none", drop=FALSE)+
scale_fill_manual(values=custom_viridis, name="", drop=FALSE)+
geom_smooth(aes(color=model),
# color="grey70",
method=lm,
se=FALSE)+
stat_cor(aes(label = paste(after_stat(r.label),
after_stat(rr.label),
after_stat(p.label),
sep = "~`,`~"),
color=model),
# color="grey70",
label.x.npc = 0.001,
label.y.npc = 0.25,
size=2)+
theme(legend.position="none")
busco4
summary(with(bagged_pheno_allhomo, glm(log(bagged_detrans_relative_error) ~ b_complete)))
## PLOT DATA ----
## bag the model estimates
bagged_pheno_fc <- read.csv("dataFiles/14.00_bagged_phenoresults_allhomofc.csv")
## list species
unique(bagged_pheno_fc$organism_name)
## add some plotting info (not all of this is needed)
bagged_pheno_fc_plot <- bagged_pheno_fc %>%
## scaled genome size
group_by(organism_name) %>%
mutate(median_bagged_detrans_predicted_age_mat = median(bagged_detrans_predicted_age_mat),
absolute_deviation =
abs(median_bagged_detrans_predicted_age_mat-bagged_detrans_predicted_age_mat)) %>%
mutate(relative_n50 = assembly_stats_contig_n50 / sum(assembly_stats_contig_n50, na.rm=TRUE)) %>%
## add if modelled genome
mutate(modelled_genome = ifelse(assembly_id %in% bagged_pheno_allhomo$assembly_id,
"Yes",
"No")) %>%
## add common names
mutate(common_name = gsub("", "", organism_name) %>%
gsub("Rattus norvegicus", "Brown rat", .) %>%
gsub("Loxodonta africana", "African elephant", .) %>%
gsub("Macaca mulatta", "Rhesus macaque", .) %>%
gsub("Equus caballus", "Horse", .) %>%
gsub("Callithrix jacchus", "Common marmoset", .) %>%
gsub("Bubalus bubalis", "Water buffalo", .) %>%
gsub("Capra hircus", "Goat", .) %>%
gsub("Cyprinus carpio", "Common carp", .) %>%
gsub("Scleropages formosus", "Asian arowana", .) %>%
gsub("Oncorhynchus mykiss", "Rainbow trout", .) %>%
gsub("Delphinapterus leucas", "Beluga whale", .) %>%
gsub("Scophthalmus maximus", "Turbot", .) %>%
gsub("Pygoscelis papua", "Gentoo penguin", .) %>%
gsub("Elephas maximus", "Asian elephant", .)) %>%
## add species label
mutate(species_label = paste0(common_name, "\n(*", organism_name, "*)")) %>%
## edit sex
mutate(sex = ifelse(organism_infraspecific_names_sex == "female",
"Female",
ifelse(organism_infraspecific_names_sex == "male",
"Male",
"Unknown"))) %>%
mutate(sex = replace_na(sex, "Unknown")) %>%
## order by median age
# arrange(median_bagged_detrans_predicted_age_mat) %>%
## order by species name
arrange(desc(species_label))
## create fc table for supplementary
fc_table <- bagged_pheno_fc_plot %>%
mutate(`Predicted age at sexual maturity (years)` = round(bagged_detrans_predicted_age_mat, digits=2)) %>%
group_by(organism_name) %>%
mutate(`Mean predicted age at sexual maturity (±SD)` =
paste0(round(mean(bagged_detrans_predicted_age_mat), digits=2),
" ± ",
round(sd(bagged_detrans_predicted_age_mat), digits=2))) %>%
select(organism_name,
assembly_accession,
biosample,
b_complete,
modelled_genome,
`Predicted age at sexual maturity (years)`,
`Mean predicted age at sexual maturity (±SD)`) %>%
rename(Species = organism_name,
`Assembly accession` = assembly_accession,
Biosample = biosample,
`BUSCO completeness score (%)` = b_complete,
`Modelled genome (Yes/No)` = modelled_genome) %>%
arrange(Species)
## save it
write.csv(fc_table, "figuresTables/Table S[fc_table].csv", row.names=FALSE)
## BUSCO ----
fc<-ggerrorplot(bagged_pheno_fc_plot,
x = "species_label",
y = "bagged_detrans_predicted_age_mat",
desc_stat = "median_iqr",
color = "black")+
labs(x="Species", y="Predicted age at sexual maturity (years)")+
coord_flip()+
scale_fill_viridis_c(option="D", direction = 1,
name="Genome completeness (%)")+
theme_classic()+
theme(axis.text.y = ggtext::element_markdown(), ## for italics
legend.position="right")+
# ylim(c(1, 10))+
scale_y_log10(limits = c(1, 10))+
geom_jitter(position = sdamr::position_jitternudge(jitter.width = 0.01,
nudge.x = -0.3),
alpha=0.75,
# pch=21,
aes(fill=b_complete,
shape = sex,
size=relative_n50))+
scale_shape_manual(values=c(21, 22, 23),
name="Sex")+
scale_size("Genome contiguity (relative n50)",
range = c(1, 4))
fc
summary(with(bagged_pheno_fc_plot, glm(absolute_deviation ~ relative_n50)))
summary(with(bagged_pheno_fc_plot, glm(absolute_deviation ~ b_complete)))
summary(with(bagged_pheno_fc_plot, glm(absolute_deviation ~ relative_n50 + b_complete)))
gen_comp <- ggarrange(fc+theme(legend.position="bottom",
legend.box = "vertical",
legend.margin=margin(c(0,0,0,0))),
busco+theme(legend.position="bottom"),
nrow=1,
widths=c(1, 0.7),
labels=c("A", "B"))
gen_comp
ggsave(paste0("figuresTables/Figure [gen_comp].png"),
gen_comp,
width = 8.75*1.3,
height = 11.25/3*1.3,
units = "in")
## lifespan correlation plot (for main figure)
contig <- (ggscatter(data = bagged_pheno_fc_plot,
x = "relative_n50",
y = "absolute_deviation",
add = "reg.line",
xlab = "Genome contiguity (relative n50)",
ylab = "Absolute deviation",
shape=21,
alpha = 0.7,
size=1.75,
ggtheme = theme_bw()) +
stat_cor(aes(label = paste(..r.label.., ..rr.label..,
..p.label.., sep = "~`,`~")),
method="kendall",
label.x.npc = 0.05,
label.y.npc = 0.95,
size=3.3))+
scale_y_log10()
busco_dev <- (ggscatter(data = bagged_pheno_fc_plot,
x = "b_complete",
y = "absolute_deviation",
add = "reg.line",
xlab = "Genome completeness (%)",
ylab = "Absolute deviation",
shape=21,
alpha = 0.7,
size=1.75,
ggtheme = theme_bw()) +
stat_cor(aes(label = paste(..r.label.., ..rr.label..,
..p.label.., sep = "~`,`~")),
method="kendall",
label.x.npc = 0.05,
label.y.npc = 0.95,
size=3.3))+
scale_y_log10()
ggarrange(contig, busco_dev)
## add to error figure
error_plot <- readRDS("figuresTables/Figure [error_both].rds")
err_gen_comp <- ggarrange(error_plot,
ggarrange(fc+theme(panel.grid.major.y = element_line(colour="grey", size=0.1),
legend.title=element_text(size=10),
legend.position="bottom",
legend.box = "vertical",
legend.margin=margin(c(-0.2,0,-0.2,0), unit='cm'))+
guides(fill = guide_colourbar(barheight = 0.9))+
scale_fill_viridis(option="rocket", name="Genome completeness (%)"),
ggarrange(busco4+theme(legend.position="none",
axis.title.y=element_text(size=10),
axis.title.x=element_text(size=9)),
NULL, nrow=2, heights=c(1, 0.25)),
nrow=1,
widths=c(1, 0.375),
labels=c("C", "D")),
heights = c(1, 0.6),
nrow=2)
err_gen_comp
ggsave(paste0("figuresTables/Figure [err_gen_comp].png"),
err_gen_comp,
width = 8.75,
height = 10,
units = "in")
ggsave(paste0("figuresTables/Figure [err_gen_comp].svg"),
err_gen_comp,
width = 8.75,
height = 10,
units = "in")
## END SCRIPT
