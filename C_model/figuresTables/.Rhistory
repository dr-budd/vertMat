check_overlap = T)
# geom_text(aes(label = paste0("PICP=", s_PICP, "\nMPIW=", s_MPIW, " (", s_MPIWP, ")")),
#           check_overlap = T,
#           x = Inf, y = Inf, hjust = 1.1, vjust = 1.1)  # To add the text in the corner
current_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
knitr::opts_knit$set(root.dir=normalizePath(paste0(current_directory)))
## load libraries
library(reticulate)
library(viridis)
library(ggpubr)
library(tidyverse)
## IMPORT, FORMAT AND EXPORT DATA ----
## define models ----
models <- c("allhomo",
"fishdanio",
"mammalshomo",
"reptilesgallus")
# models <- c("allhomo")
## pheno/results ----
pheno_all <- NULL
for (mod in models){
## import data
temp_pheno <-
read.csv(paste0("dataFiles/09.00_bagged_phenoresults_", mod, ".csv"))
## combine
pheno_all <- bind_rows(pheno_all, temp_pheno)
## name it
assign(paste0("pheno_", mod), temp_pheno)
}
list.files(paste0(wd, mod))
## get python data
models <- c("vertebrate",
"fishdanio",
"mammalshomo",
"reptilesgallus")
## import python data (mammals homo only :) )
wd <- "../../../../collaboration/sukYee/life_pi-main@764c9a4bf87/outputs/"
## import pandas
pd <- import("pandas")
## loop through 4 models
python_preds <- NULL
for (mod in models) {
## get list of folders
folders <- list.files(paste0(wd, mod))
my_folders <- folders[!grepl("pred", folders)]
temp_data_all <- NULL
for (fldr in seq_along(my_folders)) {
fldr_name <- my_folders[fldr]
## get name of relevant file
files <- list.files(paste0(wd, mod, "/", my_folders[fldr]))
split_file <- files[grepl("split", files)]
my_file <- files[grepl("pred", files)]
## temp split file
temp_split <- pd$read_pickle(paste0(wd, mod,"/",  my_folders[fldr], "/", split_file))
## import files
temp_pkl_other <- pd$read_pickle(paste0(wd, mod, "/", my_folders[fldr], "/", my_file))
temp_pkl <- pd$read_pickle(paste0(wd, mod, "/", my_folders[fldr], "/", my_file))[[3]]
temp_naive <- data.frame(temp_pkl$naive) %>% mutate(method = "Naive")
temp_jackknife <- data.frame(temp_pkl$jackknife_plus_ab) %>% mutate(method = "Jackknife+ab")
temp_cv <- data.frame(temp_pkl$cv) %>% mutate(method = "CV")
## bind data for all methods
temp_data <- full_join(temp_naive, temp_jackknife) %>%
full_join(temp_cv) %>%
mutate(bagged_mod_num = fldr_name)
## bind data for all bagged models
temp_data_all <- rbind(temp_data, temp_data_all)
}
## get predictions (median)
temp_preds <- temp_data_all %>%
group_by(method, target) %>%
summarise(median_pred = median(pred),
median_upper = median(upper),
median_lower = median(lower)) %>%
mutate(model = mod) %>%
ungroup(.)
## combine
python_preds <- rbind(python_preds, temp_preds)
}
# mammal_preds <- python_preds %>%
#   filter(., model_group == "mammalshomo")
## create plot data
plot_data <- full_join(python_preds %>%
mutate(model = ifelse(model == "vertebrate",
"allhomo",
model)) %>%
mutate(mean_age_mat = round(target, digits=3)),
pheno_all %>%
ungroup(.) %>%
select(mean_age_mat, organism_name, bagged_detrans_predicted_age_mat,
initial_split, model, model_labs) %>%
filter(., initial_split == "test") %>%
mutate(mean_age_mat = round(mean_age_mat, digits=3))) %>%
## calc things
group_by(model, method) %>%
## for PCIP
mutate(ci = ifelse(target >= median_lower &
target <= median_upper, 1, 0),
## for MPIW
interval_widths = median_upper - median_lower,
## for percent MPIW
interval_pred_ratio = interval_widths / target,
## mean prediction interval width
s_MPIW = round(mean(interval_widths), digits=2),
## mean prediction interval width (as proportion)
s_MPIWP = round(mean(interval_pred_ratio), digits=2),
## prediction interval coverage proportion
s_PICP = round(sum(ci) / length(ci), digits=2),
plot_label = paste0("PICP=", s_PICP, "; MPIW=", s_MPIW, " (", s_MPIWP, ")"))
# Assuming you have a data frame 'data' with columns 'x', 'y', 'upper', 'lower'
ggplot(plot_data, aes(x =  mean_age_mat, y =  bagged_detrans_predicted_age_mat)) +
geom_point(alpha = 0.5, color = "red") + # Points colored same as shading
geom_line(linetype = "dotted", color = "red") + # Dotted line connecting the points
geom_ribbon(aes(ymin = median_lower, ymax = median_upper), alpha = 0.2, fill = "red") +  # To add the shaded confidence interval
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") + # Dashed grey line
theme_bw() +  # A clean theme, similar to your plot
labs(x = "Known age at matuirty (years)", y = "Predicted age at maturity (years)") +
facet_wrap(vars(model_labs, method), scales="free", ncol=3)+
# facet_grid(rows=vars(model), cols=vars(method), scales="free")+
scale_y_log10()+
scale_x_log10()+
geom_text(aes(x=0, y=Inf, label=plot_label),
hjust = -0.05,
vjust = 1.5,
size=3,
check_overlap = T)
# geom_text(aes(label = paste0("PICP=", s_PICP, "\nMPIW=", s_MPIW, " (", s_MPIWP, ")")),
#           check_overlap = T,
#           x = Inf, y = Inf, hjust = 1.1, vjust = 1.1)  # To add the text in the corner
# Assuming you have a data frame 'data' with columns 'x', 'y', 'upper', 'lower'
ggplot(mammals_plot, aes(x =  mean_age_mat, y =  bagged_detrans_predicted_age_mat)) +
geom_point(alpha = 0.5, color = "red") + # Points colored same as shading
geom_line(linetype = "dotted", color = "red") + # Dotted line connecting the points
geom_ribbon(aes(ymin = median_lower, ymax = median_upper), alpha = 0.2, fill = "red") +  # To add the shaded confidence interval
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") + # Dashed grey line
theme_bw() +  # A clean theme, similar to your plot
labs(x = "Known age at matuirty (years)", y = "Predicted age at maturity (years)") +
facet_wrap("method")+
scale_y_log10()+
scale_x_log10()#+
## create plot data
plot_data <- full_join(python_preds %>%
mutate(model = ifelse(model == "vertebrate",
"allhomo",
model)) %>%
mutate(mean_age_mat = round(target, digits=3)),
pheno_all %>%
ungroup(.) %>%
select(mean_age_mat, organism_name, bagged_detrans_predicted_age_mat,
initial_split, model, model_labs) %>%
filter(., initial_split == "test") %>%
mutate(mean_age_mat = round(mean_age_mat, digits=3))) %>%
## calc things
group_by(model, method) %>%
## for PCIP
mutate(ci = ifelse(target >= median_lower &
target <= median_upper, 1, 0),
## for MPIW
interval_widths = median_upper - median_lower,
## for percent MPIW
interval_pred_ratio = interval_widths / target,
## mean prediction interval width
s_MPIW = round(mean(interval_widths), digits=2),
## mean prediction interval width (as proportion)
s_MPIWP = round(mean(interval_pred_ratio), digits=2),
## prediction interval coverage proportion
s_PICP = round(sum(ci) / length(ci), digits=2),
plot_label = paste0("PICP=", s_PICP, "; MPIW=", s_MPIW, " (", s_MPIWP, ")"))
# Assuming you have a data frame 'data' with columns 'x', 'y', 'upper', 'lower'
ggplot(plot_data, aes(x =  mean_age_mat, y =  bagged_detrans_predicted_age_mat)) +
geom_point(alpha = 0.5, color = "red") + # Points colored same as shading
geom_line(linetype = "dotted", color = "red") + # Dotted line connecting the points
geom_ribbon(aes(ymin = median_lower, ymax = median_upper), alpha = 0.2, fill = "red") +  # To add the shaded confidence interval
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") + # Dashed grey line
theme_bw() +  # A clean theme, similar to your plot
labs(x = "Known age at matuirty (years)", y = "Predicted age at maturity (years)") +
facet_wrap(vars(model_labs, method), scales="free", ncol=3)+
# facet_grid(rows=vars(model), cols=vars(method), scales="free")+
scale_y_log10()+
scale_x_log10()+
geom_text(aes(x=0, y=Inf, label=plot_label),
hjust = -0.05,
vjust = 1.5,
size=3,
check_overlap = T)
View(plot_data)
## create plot data
plot_data <- full_join(python_preds %>%
mutate(model = ifelse(model == "vertebrate",
"allhomo",
model)) %>%
mutate(mean_age_mat = round(target, digits=3)),
pheno_all %>%
ungroup(.) %>%
select(mean_age_mat, organism_name, bagged_detrans_predicted_age_mat,
initial_split, model, model_labs, bagged_detrans_absolute_error) %>%
filter(., initial_split == "test") %>%
mutate(mean_age_mat = round(mean_age_mat, digits=3))) %>%
## calc things
group_by(model, method) %>%
## for PCIP
mutate(ci = ifelse(target >= median_lower &
target <= median_upper, 1, 0),
## for MPIW
interval_widths = median_upper - median_lower,
## for percent MPIW
interval_pred_ratio = interval_widths / target,
## mean prediction interval width
s_MPIW = round(mean(interval_widths), digits=2),
## mean prediction interval width (as proportion)
s_MPIWP = round(mean(interval_pred_ratio), digits=2),
## prediction interval coverage proportion
s_PICP = round(sum(ci) / length(ci), digits=2),
plot_label = paste0("PICP=", s_PICP, "; MPIW=", s_MPIW, " (", s_MPIWP, ")"))
# Assuming you have a data frame 'data' with columns 'x', 'y', 'upper', 'lower'
ggplot(plot_data, aes(x =  mean_age_mat, y =  bagged_detrans_predicted_age_mat)) +
geom_point(alpha = 0.5, color = "red") + # Points colored same as shading
geom_line(linetype = "dotted", color = "red") + # Dotted line connecting the points
geom_ribbon(aes(ymin = median_lower, ymax = median_upper), alpha = 0.2, fill = "red") +  # To add the shaded confidence interval
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") + # Dashed grey line
theme_bw() +  # A clean theme, similar to your plot
labs(x = "Known age at matuirty (years)", y = "Predicted age at maturity (years)") +
facet_wrap(vars(model_labs, method), scales="free", ncol=3)+
# facet_grid(rows=vars(model), cols=vars(method), scales="free")+
scale_y_log10()+
scale_x_log10()+
geom_text(aes(label=organism_name), check_overlap=T)
View(pheno_allhomo)
View(pheno_mammalshomo)
getwd()
# Assuming you have a data frame 'data' with columns 'x', 'y', 'upper', 'lower'
ggplot(plot_data, aes(x =  mean_age_mat,
y =  bagged_detrans_predicted_age_mat)) +
geom_point(alpha = 0.5, color = "red") + # Points colored same as shading
geom_line(linetype = "dotted", color = "red") + # Dotted line connecting the points
geom_ribbon(aes(ymin = median_lower, ymax = median_upper), alpha = 0.2, fill = "red") +  # To add the shaded confidence interval
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") + # Dashed grey line
theme_bw() +  # A clean theme, similar to your plot
labs(x = "Known age at matuirty (years)", y = "Predicted age at maturity (years)") +
facet_wrap(vars(model_labs, method), scales="free", ncol=3)+
# facet_grid(rows=vars(model), cols=vars(method), scales="free")+
scale_y_log10()+
scale_x_log10()+
# geom_text(aes(label=organism_name), check_overlap=T)
geom_text(aes(x=0, y=Inf, label=plot_label),
hjust = -0.05,
vjust = 1.5,
size=3,
check_overlap = T)
### set working dir
current_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
knitr::opts_knit$set(root.dir=normalizePath(current_directory))
### set chunks to not echo code
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
# list.files()
knitr::include_graphics("../../B_exploreData/figuresTables/Figure S[hists].png")
knitr::include_graphics("Figure S[corr_all].png")
knitr::include_graphics("Figure S[err_all].png")
knitr::include_graphics("Figure S[ocv_pl].png")
knitr::include_graphics("Figure S[feats].png")
# knitr::include_graphics("Figure S[promoter_assoc].png")
knitr::include_graphics("Figure S[pred_int].png")
# knitr::include_graphics("Figure S[dummy].png")
d <- read.csv("/Users/bud03f/Library/Mobile Documents/com~apple~CloudDocs/uwaCsiro/analysis/maturityModelVertebratesV3/00_dataPrep/dataPrepFiles/00.01_anage_data.csv")
View(d)
library(tidyverse)
?pivot_wider
levels(factor(d$sex))
levels(factor(d$age_mat_sex))
d <- read.csv("/Users/bud03f/Library/Mobile Documents/com~apple~CloudDocs/uwaCsiro/analysis/maturityModelVertebratesV3/00_dataPrep/dataPrepFiles/00.01_anage_data.csv")
library(tidyverse)
m <- d %>% filter(age_mat_sex == "male") %>% mutate(age_mat = age_mat_male) %>% select(-age_mat_sex)
f <- d %>% filter(age_mat_sex == "female") %>% mutate(age_mat = age_mat_female) %>% select(-age_mat_sex)
d2 <- full_join(m, f)
m <- d %>% filter(age_mat_sex == "male") %>% mutate(age_mat = age_mat_male) %>% select(-age_mat_sex)
m <- d %>% filter(age_mat_sex == "male") %>% rename(age_mat_male = age_mat) %>% select(-age_mat_sex)
f <- d %>% filter(age_mat_sex == "female") %>% rename(age_mat_female = age_mat) %>% select(-age_mat_sex)
d2 <- full_join(m, f)
View(d2)
d2 <- full_join(m, f) %>%
mutate(test = ifelse(age_mat_male == age_mat_female,
"same",
"different"))
same <- filter(d2, test == "same")
diff <- filter(d2, test == "different")
nrow(same)
nrow(different)
nrow(diff)
perc_same <- 100/num*num_same
num <- nrow(d)
num_same <- nrow(same)
num_diff <- nrow(diff)
perc_same <- 100/num*num_same
perc_diff <- 100/num*num_diff
perc_same
perc_diff
perc_same <- num/100*num_same
perc_diff <- num/100*num_diff
perc_same
perc_diff
perc_same <- 100/num*num_same
perc_diff <- 100/num*num_diff
View(d2)
num <- nrow(d2)
perc_same <- 100/num*num_same
perc_diff <- 100/num*num_diff
na <- filter(is.na(d2))
na <- filter(d1, is.na(test))
na <- filter(d2, is.na(test))
num_one <- nrow(na)
perc_one
perc_same <- 100/num*num_same
perc_diff <- 100/num*num_diff
perc_one <- 100/num*num_one
perc_same
perc_diff
perc_one
### set working dir
current_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
knitr::opts_knit$set(root.dir=normalizePath(current_directory))
### set chunks to not echo code
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
# list.files()
knitr::include_graphics("../../B_exploreData/figuresTables/Figure S[hists].png")
knitr::include_graphics("Figure S[corr_all].png")
knitr::include_graphics("Figure S[err_all].png")
knitr::include_graphics("Figure S[ocv_pl].png")
knitr::include_graphics("Figure S[feats].png")
# knitr::include_graphics("Figure S[promoter_assoc].png")
knitr::include_graphics("Figure S[pred_int].png")
# knitr::include_graphics("Figure S[dummy].png")
## combine supp tables into one multi-tabbed excel document :)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(xlsx)
library(writexl)
library(tidyverse)
spacer <-
## ----------------------------------------------------------------------------------------------------
## Table S[accession]
legend <- 'Table S1. List of NCBI genome accession numbers and assembly names for all species used to build and assess the vertebrate age at maturity genomic prediction models.'
accession <- read.csv("../../../00_dataPrep/figuresTables/Table S[accession_all].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)), ## add legend row
rep(NA, ncol(.)), ## add an empty row for spacing
.) ## bind with the original data
## ----------------------------------------------------------------------------------------------------
## Table S[reported]
legend <- 'Table S2. Database of reported age at maturity values used to derive known age at maturity values for modelling, where the known age at maturity is calculated as the mean of reported values following data pre-processing steps (see methods). Data sources are also provided.'
reported <- read.csv("../../B_exploreData/figuresTables/Table S[db_age_mat].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table S[no_hits_all]
legend <- 'Table S3. List of species assemblies that did not return any promoter sequence matches during BLAST queries.'
no_hits_all <- read.csv("../../B_exploreData/figuresTables/Table S[no_hits_all].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table S[sum_stats]
legend <- 'Table S4. Summary statistics for the data sets used to build the four age at maturity prediction models: All-vertebrate, fish-specific, mammal-specific and reptile-specific. Age at maturity data is presented first as raw data and second as log-transformed values. CpG O/E data is presented first as raw data, second as filtered data (promoters with < 10 % coverage are removed) and third as filtered, zero imputed data (where NA values resulting from the absence of a BLAST hit are replaced with zeros). The log transformed age at maturity data and the filtered, zero-imputed CpG O/E data were modelled.'
sum_stats <- read.csv("../../B_exploreData/figuresTables/Table S[sum_stats].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [feat_weights]
legend <- 'Table S5. Feature weights from the four vertebrate age at maturity prediction models. For each model (all-vertebrate, fish-specific, mammal-specific and reptile-specific), feature weights from all 10 bagged models are given.'
feat_weights <- read.csv("Table S[feat_weights].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [cv_metrics]
legend <- 'Table S6. Summary statistics for metrics resulting from 10-fold outer cross validation for each of the four age at maturity prediction models: All-vertebrate, fish-specific, mammal-specific and reptile-specific. Where P-value: train error — validate error represents the significance of a unparied t-test between absolute error (in years) of the training and validation data sets. R, R^2 and P-values are derived from Pearson correlations between known and predicted ages at maturity for each model.'
cv_metrics <- read.csv("Table S[cv_metrics].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [cv_metrics_raw]
legend <- 'Table S7. Raw values for the summary statistics provided in Table S[cv_metrics].'
cv_metrics_raw <- read.csv("Table S[cv_metrics_raw].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [predictions]
legend <- 'Table S8. Known and predicted values used in building, and produced by, the age at maturity prediction models: All-vertebrate, fish-specific, mammal-specific and reptile-specific. Data are ordered by model, vertebrate group and organism name.'
predictions <- read.csv("Table S[predictions].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [gene_table]
legend <- 'Table S9. Full gene name, summary and expression information from https://www.ncbi.nlm.nih.gov/gene/ for promoters most strongly associated with age at maturity in the four ensemble models.'
gene_table <- read.csv("Table S[gene_table].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [unknowns_preds]
legend <- 'Table S10. New age at maturity predictions for species for which these values were previously unavailable (or otherwise absent from our data set). Predictions were made using genome sequence data from NCBI and our group-specific ensemble models. Prediction intervals (lower and upper bounds) were estimated using the open-source python package model agnostic prediction interval estimator (MAPIE). Species are assigned to IUCN red list categories based on data provided https://www.iucnredlist.org (accessed 05/08/2023). Any species not listed were assigned to the category ‘Not Evaluated’.'
unknowns_preds <- read.csv("Table S[unknowns_preds].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## COMBINE AND EXPORT ----------------------------------------------------------------------------------
## create list in order of appearance
sheets <- list("Table S1" = accession,
"Table S2" = reported,
"Table S3" = no_hits_all,
"Table S4" = sum_stats,
"Table S5" = feat_weights,
"Table S6" = cv_metrics,
"Table S7" = cv_metrics_raw,
"Table S8" = predictions,
"Table S9" = gene_table,
"Table S10" = unknowns_preds)
## export
write_xlsx(sheets, "_supplementary_tables_numbered.xlsx", col_names=FALSE)
## combine supp tables into one multi-tabbed excel document :)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(xlsx)
library(writexl)
library(tidyverse)
spacer <-
## ----------------------------------------------------------------------------------------------------
## Table S[accession]
legend <- 'Table S1. List of NCBI genome accession numbers and assembly names for all species used to build and assess the vertebrate age at maturity genomic prediction models.'
accession <- read.csv("../../../00_dataPrep/figuresTables/Table S[accession_all].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)), ## add legend row
rep(NA, ncol(.)), ## add an empty row for spacing
.) ## bind with the original data
## ----------------------------------------------------------------------------------------------------
## Table S[reported]
legend <- 'Table S2. Database of reported age at maturity values used to derive known age at maturity values for modelling, where the known age at maturity is calculated as the mean of reported values following data pre-processing steps (see methods). Data sources are also provided.'
reported <- read.csv("../../B_exploreData/figuresTables/Table S[db_age_mat].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table S[no_hits_all]
legend <- 'Table S3. List of species assemblies that did not return any promoter sequence matches during BLAST queries.'
no_hits_all <- read.csv("../../B_exploreData/figuresTables/Table S[no_hits_all].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table S[sum_stats]
legend <- 'Table S4. Summary statistics for the data sets used to build the four age at maturity prediction models: All-vertebrate, fish-specific, mammal-specific and reptile-specific. Age at maturity data is presented first as raw data and second as log-transformed values. CpG O/E data is presented first as raw data, second as filtered data (promoters with < 10 % coverage are removed) and third as filtered, zero imputed data (where NA values resulting from the absence of a BLAST hit are replaced with zeros). The log transformed age at maturity data and the filtered, zero-imputed CpG O/E data were modelled.'
sum_stats <- read.csv("../../B_exploreData/figuresTables/Table S[sum_stats].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [feat_weights]
legend <- 'Table S5. Feature weights from the four vertebrate age at maturity prediction models. For each model (all-vertebrate, fish-specific, mammal-specific and reptile-specific), feature weights from all 10 bagged models are given.'
feat_weights <- read.csv("Table S[feat_weights].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [cv_metrics]
legend <- 'Table S6. Summary statistics for metrics resulting from 10-fold outer cross validation for each of the four age at maturity prediction models: All-vertebrate, fish-specific, mammal-specific and reptile-specific. Where P-value: train error — validate error represents the significance of a unparied t-test between absolute error (in years) of the training and validation data sets. R, R^2 and P-values are derived from Pearson correlations between known and predicted ages at maturity for each model.'
cv_metrics <- read.csv("Table S[cv_metrics].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [cv_metrics_raw]
legend <- 'Table S7. Raw values for the summary statistics provided in Table S6.'
cv_metrics_raw <- read.csv("Table S[cv_metrics_raw].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [predictions]
legend <- 'Table S8. Known and predicted values used in building, and produced by, the age at maturity prediction models: All-vertebrate, fish-specific, mammal-specific and reptile-specific. Data are ordered by model, vertebrate group and organism name.'
predictions <- read.csv("Table S[predictions].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [gene_table]
legend <- 'Table S9. Full gene name, summary and expression information from https://www.ncbi.nlm.nih.gov/gene/ for promoters most strongly associated with age at maturity in the four ensemble models.'
gene_table <- read.csv("Table S[gene_table].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## ----------------------------------------------------------------------------------------------------
## Table [unknowns_preds]
legend <- 'Table S10. New age at maturity predictions for species for which these values were previously unavailable (or otherwise absent from our data set). Predictions were made using genome sequence data from NCBI and our group-specific ensemble models. Prediction intervals (lower and upper bounds) were estimated using the open-source python package model agnostic prediction interval estimator (MAPIE). Species are assigned to IUCN red list categories based on data provided https://www.iucnredlist.org (accessed 05/08/2023). Any species not listed were assigned to the category ‘Not Evaluated’.'
unknowns_preds <- read.csv("Table S[unknowns_preds].csv", header=FALSE) %>%
rbind(c(legend, rep(" ", ncol(.)-1)),
rep(NA, ncol(.)),
.)
## COMBINE AND EXPORT ----------------------------------------------------------------------------------
## create list in order of appearance
sheets <- list("Table S1" = accession,
"Table S2" = reported,
"Table S3" = no_hits_all,
"Table S4" = sum_stats,
"Table S5" = feat_weights,
"Table S6" = cv_metrics,
"Table S7" = cv_metrics_raw,
"Table S8" = predictions,
"Table S9" = gene_table,
"Table S10" = unknowns_preds)
## export
write_xlsx(sheets, "_supplementary_tables_numbered.xlsx", col_names=FALSE)
